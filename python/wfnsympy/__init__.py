from WFNSYMLIB import mainlib
import os
import numpy as np
import filecmp

os.chdir('/Users/abel/Programes/WFNSYM/test/')

Etot=36
NEval=26
NBas=30
Norb=45*2
NTotShell = 15

AtLab = ['H', 'N', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H']
iZAt = [1, 7, 6, 6, 6, 6, 1, 1, 1, 1]

shell_type = [0, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0]

p_exp = [3.42525091E+00, 6.23913730E-01, 1.68855400E-01, 9.91061690E+01, 1.80523120E+01,
         4.88566020E+00, 3.78045590E+00, 8.78496600E-01, 2.85714400E-01, 7.16168370E+01,
         1.30450960E+01, 3.53051220E+00, 2.94124940E+00, 6.83483100E-01, 2.22289900E-01,
         7.16168370E+01, 1.30450960E+01, 3.53051220E+00, 2.94124940E+00, 6.83483100E-01,
         2.22289900E-01, 7.16168370E+01, 1.30450960E+01, 3.53051220E+00, 2.94124940E+00,
         6.83483100E-01, 2.22289900E-01, 7.16168370E+01, 1.30450960E+01, 3.53051220E+00,
         2.94124940E+00, 6.83483100E-01, 2.22289900E-01, 3.42525091E+00, 6.23913730E-01,
         1.68855400E-01, 3.42525091E+00, 6.23913730E-01, 1.68855400E-01, 3.42525091E+00,
         6.23913730E-01, 1.68855400E-01, 3.42525091E+00, 6.23913730E-01, 1.68855400E-01]

con_coef = [1.54328971E-01,  5.35328142E-01,  4.44634542E-01,  1.54328970E-01,  5.35328141E-01,
            4.44634541E-01, -9.99672284E-02,  3.99512824E-01,  7.00115459E-01,  1.54328970E-01,
            5.35328140E-01,  4.44634540E-01, -9.99672301E-02,  3.99512830E-01,  7.00115471E-01,
            1.54328970E-01,  5.35328140E-01,  4.44634540E-01, -9.99672301E-02,  3.99512830E-01,
            7.00115471E-01,  1.54328970E-01,  5.35328140E-01,  4.44634540E-01, -9.99672301E-02,
            3.99512830E-01,  7.00115471E-01,  1.54328970E-01,  5.35328140E-01,  4.44634540E-01,
           -9.99672301E-02,  3.99512830E-01,  7.00115471E-01,  1.54328971E-01,  5.35328142E-01,
            4.44634542E-01,  1.54328971E-01,  5.35328142E-01,  4.44634542E-01,  1.54328971E-01,
            5.35328142E-01,  4.44634542E-01,  1.54328971E-01,  5.35328142E-01,  4.44634542E-01]

p_con_coef = [0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00,
              0.00000000E+00, 1.55916269E-01, 6.07683714E-01, 3.91957386E-01, 0.00000000E+00,
              0.00000000E+00, 0.00000000E+00, 1.55916272E-01, 6.07683728E-01, 3.91957395E-01,
              0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 1.55916272E-01, 6.07683728E-01,
              3.91957395E-01, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 1.55916272E-01,
              6.07683728E-01, 3.91957395E-01, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00,
              1.55916272E-01, 6.07683728E-01, 3.91957395E-01, 0.00000000E+00, 0.00000000E+00,
              0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00,
              0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00]

RAt = [[0.00000000E+00,  0.00000000E+00, 4.02378628E+00],
       [0.00000000E+00,  0.00000000E+00,  2.11400638E+00],
       [0.00000000E+00,  2.12502726E+00,  6.30346495E-01],
       [0.00000000E+00, -2.12502726E+00,  6.30346495E-01],
       [0.00000000E+00,  1.33869522E+00, -1.85912579E+00],
       [0.00000000E+00, -1.33869522E+00, -1.85912579E+00],
       [0.00000000E+00,  3.99274942E+00,  1.45602642E+00],
       [0.00000000E+00, -3.99274942E+00,  1.45602642E+00],
       [0.00000000E+00,  2.56483456E+00, -3.49426423E+00],
       [0.00000000E+00, -2.56483456E+00, -3.49426423E+00]]

n_prim = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]

atom_map = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 10]

basis = 'STO-3G'

igroup = 3
ngroup = 6

# ---------------  INTERFACE -------------- #

Nat = len(iZAt)

NShell = np.unique(atom_map, return_counts=True)[1]


AtLab = np.array([list('{:<2}'.format(char)) for char in AtLab])

ROrb = np.repeat(RAt, NShell, axis=0)
ROrb = np.repeat(ROrb, n_prim, axis=0)

typeList = {'-1': ['sp', 4],
             '0': ['s', 1],
             '1': ['p', 3],
             '2': ['d', 6]}  # Warning check for pure D

print(np.cumsum(n_prim))
print(len(p_exp))

exp_group = np.array(np.split(np.array(p_exp), np.cumsum(n_prim))[:-1])

Alph=[]
for i, stype in enumerate(shell_type):
    for _ in range(typeList['{}'.format(stype)][1]):
        # print(stype, i, typeList['{}'.format(stype)])
        Alph.append(exp_group[i])
Alph = np.array(Alph).flatten()


coef_group = np.array(np.split(np.array(con_coef), np.cumsum(n_prim))[:-1])
b_coef_group = np.array(np.split(np.array(p_con_coef), np.cumsum(n_prim))[:-1])

COrb = []
for i, stype in enumerate(shell_type):
    COrb.append(coef_group[i])
    if not (b_coef_group[i] == 0).all():
        for _ in range(n_prim[i]):
            COrb.append(b_coef_group[i])
COrb = np.array(COrb).flatten()

os.remove('pirrol.wout')
mainlib('pirrol', basis, Etot, NEval, NBas, Norb, Nat, NTotShell, iZAt, AtLab, Alph,
        COrb, NShell, RAt, n_prim, shell_type,  igroup, ngroup)

if (filecmp.cmp('pirrol.wout', 'pirrol.wout_ref')):
    print('!!!!!!!ALL OK!!!!!!!')
else:
    print('**********ERROR***********')

